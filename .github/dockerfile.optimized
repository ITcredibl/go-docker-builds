# Build stage: Use a full-featured image to compile
FROM golang:${GO_VERSION:-1.22} AS builder
WORKDIR /app

# Leverage Docker layer caching for dependencies
COPY go.mod go.sum ./
RUN go mod download

# Copy source code and PGO profile (if available)
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags='-s -w' \
    -pgo=auto \
    -o /usr/bin/app \
    ./cmd/server/

# Run stage: Use minimal image with security best practices
FROM alpine:latest AS production

# Install CA certificates for HTTPS support
RUN apk --no-cache add ca-certificates tzdata

# Create non-root user and group
RUN addgroup -g 1000 app && \
    adduser -u 1000 -G app -D app

# Set working directory and ensure proper permissions
WORKDIR /home/app
RUN chown app:app /home/app

# Copy compiled binary from builder stage
COPY --from=builder --chown=app:app /usr/bin/app .

# Switch to non-root user
USER app

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Expose port and define entrypoint
EXPOSE 8080
CMD ["./app"]